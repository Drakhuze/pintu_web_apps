import Head from 'next/head'
import Image from 'next/image'
import PillText from "@/components/PillText"
import { useQuery } from 'react-query';
import { NextPage } from "next";
import SearchIcon from "@/assets/SearchIcon";
import API from "@/utilities/FetchApi";
import { TAGS } from "@/constants";
import { IFinalData, ISymbol, ITicker } from "@/interfaces";
import { useEffect, useMemo, useState } from "react";
import SearchBox from "@/components/SearchBox";

const getSymbolList = async () => await (await fetch("https://www.binance.com/bapi/composite/v1/public/marketing/symbol/list")).json();
const getTickerList = async () => await (await fetch("https://api.binance.com/api/v3/ticker/24hr")).json();

const Home: NextPage = () => {
  const [searchKey, setSearchKey] = useState("");
  const [reFetch, setReFetch] = useState(false);

  const symbolList = useQuery("symbolList", getSymbolList);
  const tickerList = useQuery("tickerList", getTickerList, {
    refetchInterval: 3000
  });

  useEffect(() => { 
  }, [searchKey]);

  const getCombinedData = () => {
    const symbols = symbolList.data?.data.map((item: ISymbol, index: number) => {
      return {
        symbol: item.symbol,
        name: item.name,
        fullName: item.fullName,
        logo: item.logo,
        price: item.price,
        volume: item.volume,
        rank: item.rank,
        tags: item.tags
      }
    }) as ISymbol[];

    const tickers = tickerList.data.map((item: ITicker, index: number) => {
      return {
        symbol: item.symbol,
        priceChange: item.priceChange,
        priceChangePercent: item.priceChangePercent,
        lastPrice: item.lastPrice,
        volume: item.volume
      }
    }) as ITicker[];

    const result = symbols.map((item: ISymbol, index: number) => {
      const ticker = tickers.filter(p => p.symbol === item.symbol)[0];
      return {
        symbol: item.symbol,
        name: item.name,
        fullName: item.fullName,
        logo: item.logo,
        price: ticker.lastPrice,
        volume: item.volume,
        rank: item.rank,
        tags: item.tags,
        priceChangePercent: ticker.priceChangePercent
      }
    }) as IFinalData[];
    return result;
  };

  const combinedData = (!symbolList.isLoading && !tickerList.isLoading) ? getCombinedData() : [];

  combinedData.sort((a, b) => {
    if (a.rank === null) return 1;
    else if (b.rank === null) return -1;
    else return a.rank < b.rank ? -1 : 1;
  });

  const finalData = combinedData.filter((p) => {
    if(searchKey === "") return combinedData;
    return p.name.toLowerCase().includes(searchKey.toLowerCase()) || p.fullName.toLowerCase().includes(searchKey.toLowerCase());
  })

  const renderTable = () => {
    if (symbolList.isLoading) {
      return (
        <div>Loading...</div>
      )
    }
    return (
      <>
        <table className="table-crypto">
          <thead>
            <tr>
              <th className="w-1/12"></th>
              <th className="w-3/12">Crypto</th>
              <th className="w-2/12"></th>
              <th className="w-2/12">Harga</th>
              <th className="w-1/12">24 Jam</th>
              <th className="w-1/12">Volume</th>
            </tr>
          </thead>
          <tbody>
            {(!symbolList.isLoading && !tickerList.isLoading) && finalData.map((item: IFinalData, index: number) => {
              const isPositive = Number(item.priceChangePercent) == 0 ? "text-white" : Number(item.priceChangePercent) >= 0 ? "text-green-400" : "text-red-400";
              return (
                <tr key={item.symbol}>
                  <td>
                    <div
                      className="h-10 w-10"
                      style={{
                        backgroundImage: `url('${item.logo}')`,
                        backgroundSize: "contain"
                      }}
                    /> </td>
                  <td>{item.fullName}</td>
                  <td>{item.name}</td>
                  <td>{Number(item.price)}</td>
                  <td>
                    <span className={isPositive}>
                      {Number(item.priceChangePercent)}%
                    </span>
                  </td>
                  <td>{Number(item.volume)}</td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Pintu</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto">
        <div className="flex my-4">
          <div className="font-bold text-2xl">
            Harga Crypto dalam Rupiah Hari Ini
          </div>
          <div className="ml-auto">
            <SearchBox setSearchKey={setSearchKey} />
          </div>
        </div>

        <div className="flex mt-8 overflow-auto">
          {TAGS.map((item: any, index: number) => {
            return (
              <PillText key={index} text={item.name} />
            )
          })}
        </div>

        <div className="my-4">
          {renderTable()}
        </div>

      </main>

    </>
  )
}

export default Home;